package co.com.rm;

import java.util.Vector;

/**
 * Manejador de reprocesos de reverso
 * Implementado desde Nov 23/2020
 * 
 */
public class RevertManager {

	private final static int COLLECT_DIMENSION = 100;

	/**
	 * Coleccion de registros a reversar
	 */
	private static Vector<DataRevertManager> retryCollect = null;

	/**
	 * Hilo para el manejo de la colección
	 */
	private static RetryWorker retryWorker = new RetryWorker();

	/**
	 * ThreadMonitor para la administración del Hilo runnaWorker (Hilos obreros)
	 */
	private static Thread threadRevert = null;

	/**
	 * Constructor de la Clase
	 */

	static {
		retryCollect = new Vector<DataRevertManager>(COLLECT_DIMENSION);
		threadRevert = new Thread(retryWorker);
	}

	/**
	 * Encargado de recorrer la colección y procesar el reintento
	 */
	private static class RetryWorker implements Runnable {

		@Override
		public void run() {

			int sizeCollect = retryCollect.size();

			if (sizeCollect == 0) {
				return;
			}

			int indexElement = 0;
			while (indexElement <= sizeCollect - 1) {
				if (retryCollect.elementAt(indexElement).getProgramRetry() > 0) {
					
					
					retryCollect.elementAt(indexElement).programRetryDecrease();
					
					//En este punto se pregunta por la respuesta futura. En este caso es una simple consulta al store
					//si no está el registro, se entiende que ya se reverso

					if (TargetWork.isAlreadyDone(retryCollect.elementAt(indexElement).getTrazabilityCode())) {
						synchronized (retryCollect) {
							retryCollect.remove(indexElement);
						}
					} else {
						indexElement++;
					}
				} else {
					synchronized (retryCollect) {
						NotifyManager.programNotify(retryCollect.remove(indexElement).getTrazabilityCode());
					}
				}
				sizeCollect = retryCollect.size();
			}
		}
	}

	/**
	 * Programa el reverso
	 * 
	 * @param DataRevertManager
	 */
	public static void programIt(DataRevertManager record) {
		retryCollect.add(record);
	}

	/**
	 * Ejecuta Programa de reverso
	 */
	public static void execProgram() {
		/**
		 * Lanza trabajo al Monitor-thread, si no hay hilos trabajando
		 */
		if (!threadRevert.isAlive()) {
			System.out.println(" ->Iniciando proceso ");
			threadRevert = new Thread(retryWorker);
			threadRevert.start();
		}

	}

	/**
	 * Determina si hay trabajo para hacer
	 * @return
	 */
	public static boolean thereIsMoreWork() {
		if (retryCollect.isEmpty()) {
			System.out.println("Terminó trabajo ");
			return Boolean.FALSE;
		}
		return Boolean.TRUE;
	}
	
	/**
	 * Resetea dimensionamientos de memoria
	 */
	public static void resetCollect() {
		
		if (retryCollect.isEmpty()) {
			System.out.println("Capacidad conque termina: "+retryCollect.capacity());
			retryCollect = new Vector<DataRevertManager>(COLLECT_DIMENSION);
			System.out.println("Capacidad inicial: "+retryCollect.capacity());			
		}
		
	}
}
